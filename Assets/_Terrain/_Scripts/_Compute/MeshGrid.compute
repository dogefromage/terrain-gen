#pragma kernel GenerateMesh

#include "TerrainUtils.compute"

Texture2D<float> HeightMap;

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float3> normals;
RWStructuredBuffer<int> triangles;
RWStructuredBuffer<float2> uvs;

uint N;
float size;
uint step;
uint seam;

float3 calcVert(int2 id)
{
    float2 pos = calculatePosition(id.xy, N, size);

    int2 heightMapId = step * id.xy + seam;

    float height = HeightMap[heightMapId];

    return float3(pos.x, height, pos.y);
}

[numthreads(8,8,1)]
void GenerateMesh(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= N || id.y >= N) return;

    int vertIndex = N * id.y + id.x;

    vertices[vertIndex] = calcVert(id.xy);

    // normal

    float3 perpendicular = cross(
        calcVert(id.xy + int2(0, 1)) - calcVert(id.xy - int2(0, 1)),
        calcVert(id.xy + int2(1, 0)) - calcVert(id.xy - int2(1, 0))
    );

    float3 diagonal = cross(
        calcVert(id.xy + int2(1, 1)) - calcVert(id.xy - int2(1, 1)),
        calcVert(id.xy + int2(1, -1)) - calcVert(id.xy - int2(1, -1))
    );

    normals[vertIndex] = normalize(perpendicular + 0.5 * diagonal);

    // uv

    uvs[vertIndex] = id.xy / (float)N;

    // tris

    if (id.y < N - 1 && id.x < N - 1)
    {
        int triIndex = 6 * ( (N - 1) * id.y + id.x );
        
        triangles[triIndex + 0] = vertIndex;
        triangles[triIndex + 1] = vertIndex + N;
        triangles[triIndex + 2] = vertIndex + 1;
        triangles[triIndex + 3] = vertIndex + N + 1;
        triangles[triIndex + 4] = vertIndex + 1;
        triangles[triIndex + 5] = vertIndex + N;
    }
}
