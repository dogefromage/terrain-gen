#pragma kernel CSMain
#include "Coordinates.compute"

Texture2D<float> HeightMap;

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float3> normals;
RWStructuredBuffer<uint> triangles;

int N;
float size;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= N || id.y >= N) return;

    float2 pos = calculatePosition(id, N, size);

    float height = HeightMap[id.xy];

    float3 vert = float3(pos.x, height, pos.y);

    int vertIndex = N * id.y + id.x;

    vertices[vertIndex] = vert;
    normals[vertIndex] = float3(0, 1., 0);

    if (id.y < N - 1 && id.x < N - 1)
    {
        int triIndex = 6 * ( (N - 1) * id.y + id.x );
        
        triangles[triIndex + 0] = vertIndex;
        triangles[triIndex + 1] = vertIndex + N;
        triangles[triIndex + 2] = vertIndex + 1;
        triangles[triIndex + 3] = vertIndex + N + 1;
        triangles[triIndex + 4] = vertIndex + 1;
        triangles[triIndex + 5] = vertIndex + N;
    }
}
